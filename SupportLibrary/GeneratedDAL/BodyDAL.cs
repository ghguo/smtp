// Body Data Access Layer
//
// DO NOT MODIFY THIS FILE DIRECTLY.  IT WILL BE OVERWRITTEN.
// Generated by SQLServerGenerator.cs
// Copyright (c) 2010, Chris Laforet Software.  All rights reserved
//
// Generated at 04/24/2010 03:03


using System;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Sql;
using System.Collections.Generic;
using SupportLibrary.Database;


namespace SupportLibrary.Database
	{
	public partial class BodyDAL: IDAL<BodyRecord>
		{
		private readonly string _connectionString;
		public readonly string TableName = "Body";

		public BodyDAL(string ConnectionString)
			{
			_connectionString = ConnectionString;
			}

		static public BodyRecord ReapRecord(SqlDataReader Reader)
			{
			int ID = Reader.GetInt32(Reader.GetOrdinal("ID"));
			string MessageIdentifier = Reader.GetString(Reader.GetOrdinal("MessageIdentifier"));
			string HeaderText = null;
			if (!Reader.IsDBNull(Reader.GetOrdinal("HeaderText")))
				HeaderText = Reader.GetString(Reader.GetOrdinal("HeaderText"));
			string BodyText = null;
			if (!Reader.IsDBNull(Reader.GetOrdinal("BodyText")))
				BodyText = Reader.GetString(Reader.GetOrdinal("BodyText"));
			BodyRecord record = new BodyRecord();

			record.ID = ID;
			record.MessageIdentifier = MessageIdentifier;
			record.HeaderText = HeaderText;
			record.BodyText = BodyText;
			return record;
			}

		public virtual IList<BodyRecord> ReadAllRecords()
			{
			IList<BodyRecord> list = new List<BodyRecord>(64);
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					SqlCommand command = new SqlCommand("SELECT * FROM [Body]",conn);
					SqlDataReader rs = command.ExecuteReader();
					while (rs.Read())
						list.Add(ReapRecord(rs));
					rs.Close();
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			return list;
			}

		public virtual BodyRecord ReadRecord(int RecordID)
			{
			BodyRecord record = null;
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					SqlCommand command = new SqlCommand("SELECT * FROM [Body] WHERE ID=@ID",conn);
					SqlParameter param = new SqlParameter("@ID",SqlDbType.Int,0);
					param.Value = RecordID;
					command.Parameters.Add(param);
					SqlDataReader rs = command.ExecuteReader();
					if (rs.Read())
						record = ReapRecord(rs);
					rs.Close();
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			return record;
			}

		public virtual BodyRecord ReadRecordByMessageIdentifier(string MessageIdentifier)
			{
			BodyRecord record = null;
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					SqlCommand command = new SqlCommand("SELECT * FROM [Body] WHERE MessageIdentifier=@MessageIdentifier",conn);
					SqlParameter param = new SqlParameter("@MessageIdentifier",SqlDbType.VarChar,0);
					param.Value = MessageIdentifier;
					command.Parameters.Add(param);
					SqlDataReader rs = command.ExecuteReader();
					if (rs.Read())
						record = ReapRecord(rs);
					rs.Close();
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			return record;
			}

		public virtual void CreateRecord(BodyRecord record)
			{
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					string sql = "INSERT INTO [Body] " + 
					"(MessageIdentifier,HeaderText,BodyText	) " +
					"VALUES (@MessageIdentifier,@HeaderText,@BodyText	)";
					SqlCommand command = new SqlCommand(sql,conn);
					SqlParameter param = new SqlParameter("@MessageIdentifier",SqlDbType.VarChar,0);
					param.Value = record.MessageIdentifier;
					command.Parameters.Add(param);
					param = new SqlParameter("@HeaderText",SqlDbType.VarChar,0);
					if (record.HeaderText == null)
						param.Value = DBNull.Value;
					else
						param.Value = record.HeaderText;
					command.Parameters.Add(param);
					param = new SqlParameter("@BodyText",SqlDbType.VarChar,0);
					if (record.BodyText == null)
						param.Value = DBNull.Value;
					else
						param.Value = record.BodyText;
					command.Parameters.Add(param);
					command.ExecuteNonQuery();
					record.ID = DatabaseSupport.GetIdentity(conn);
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			}

		public virtual int CreateRecord(string MessageIdentifier,string HeaderText,string BodyText)
			{
			// populate the record with items
			BodyRecord record = new BodyRecord();
			record.MessageIdentifier = MessageIdentifier;
			record.HeaderText = HeaderText;
			record.BodyText = BodyText;

			// write the record out
			CreateRecord(record);
			return record.ID;
			}

		public virtual void UpdateRecord(BodyRecord record)
			{
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					string sql = "UPDATE [Body] " +
					"SET MessageIdentifier=@MessageIdentifier,HeaderText=@HeaderText,BodyText=@BodyText WHERE ID=@ID";
					SqlCommand command = new SqlCommand(sql,conn);
					SqlParameter param = new SqlParameter("@MessageIdentifier",SqlDbType.VarChar,0);
					param.Value = record.MessageIdentifier;
					command.Parameters.Add(param);
					param = new SqlParameter("@HeaderText",SqlDbType.VarChar,0);
					if (record.HeaderText == null)
						param.Value = DBNull.Value;
					else
						param.Value = record.HeaderText;
					command.Parameters.Add(param);
					param = new SqlParameter("@BodyText",SqlDbType.VarChar,0);
					if (record.BodyText == null)
						param.Value = DBNull.Value;
					else
						param.Value = record.BodyText;
					command.Parameters.Add(param);
					param = new SqlParameter("@ID",SqlDbType.Int,0);
					param.Value = record.ID;
					command.Parameters.Add(param);
					command.ExecuteNonQuery();
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			}

		public virtual void UpdateRecord(int ID,string MessageIdentifier,string HeaderText,string BodyText)
			{
			// populate the record with items
			BodyRecord record = new BodyRecord();
			record.ID = ID;
			record.MessageIdentifier = MessageIdentifier;
			record.HeaderText = HeaderText;
			record.BodyText = BodyText;

			// write the record out
			UpdateRecord(record);
			}

		public virtual void DeleteRecord(int RecordID)
			{
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					string sql = "DELETE FROM [Body] WHERE ID=@ID";
					SqlCommand command = new SqlCommand(sql,conn);
					SqlParameter param = new SqlParameter("@ID",SqlDbType.Int,0);
					param.Value = RecordID;
					command.Parameters.Add(param);
					command.ExecuteNonQuery();
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			}

		public virtual void DeleteRecord(BodyRecord record)
			{
			DeleteRecord(record.ID);
			}
		}
	}
