// Configuration Data Access Layer
//
// DO NOT MODIFY THIS FILE DIRECTLY.  IT WILL BE OVERWRITTEN.
// Generated by SQLServerGenerator.cs
// Copyright (c) 2010, Chris Laforet Software.  All rights reserved
//
// Generated at 04/24/2010 03:03


using System;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Sql;
using System.Collections.Generic;
using SupportLibrary.Database;


namespace SupportLibrary.Database
	{
	public partial class ConfigurationDAL: IDAL<ConfigurationRecord>
		{
		private readonly string _connectionString;
		public readonly string TableName = "Configuration";

		public ConfigurationDAL(string ConnectionString)
			{
			_connectionString = ConnectionString;
			}

		static public ConfigurationRecord ReapRecord(SqlDataReader Reader)
			{
			int ID = Reader.GetInt32(Reader.GetOrdinal("ID"));
			bool AllowLocalHost = Reader.GetBoolean(Reader.GetOrdinal("AllowLocalHost"));
			bool AllowRemote = Reader.GetBoolean(Reader.GetOrdinal("AllowRemote"));
			short Port = Reader.GetInt16(Reader.GetOrdinal("Port"));
			int ExpireAfterMinutes = Reader.GetInt32(Reader.GetOrdinal("ExpireAfterMinutes"));
			int RetryAfterMinutes = Reader.GetInt32(Reader.GetOrdinal("RetryAfterMinutes"));
			int CleanupDays = Reader.GetInt32(Reader.GetOrdinal("CleanupDays"));
			ConfigurationRecord record = new ConfigurationRecord();

			record.ID = ID;
			record.AllowLocalHost = AllowLocalHost;
			record.AllowRemote = AllowRemote;
			record.Port = Port;
			record.ExpireAfterMinutes = ExpireAfterMinutes;
			record.RetryAfterMinutes = RetryAfterMinutes;
			record.CleanupDays = CleanupDays;
			return record;
			}

		public virtual IList<ConfigurationRecord> ReadAllRecords()
			{
			IList<ConfigurationRecord> list = new List<ConfigurationRecord>(64);
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					SqlCommand command = new SqlCommand("SELECT * FROM [Configuration]",conn);
					SqlDataReader rs = command.ExecuteReader();
					while (rs.Read())
						list.Add(ReapRecord(rs));
					rs.Close();
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			return list;
			}

		public virtual ConfigurationRecord ReadRecord(int RecordID)
			{
			ConfigurationRecord record = null;
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					SqlCommand command = new SqlCommand("SELECT * FROM [Configuration] WHERE ID=@ID",conn);
					SqlParameter param = new SqlParameter("@ID",SqlDbType.Int,0);
					param.Value = RecordID;
					command.Parameters.Add(param);
					SqlDataReader rs = command.ExecuteReader();
					if (rs.Read())
						record = ReapRecord(rs);
					rs.Close();
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			return record;
			}

		public virtual void CreateRecord(ConfigurationRecord record)
			{
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					string sql = "INSERT INTO [Configuration] " + 
					"(AllowLocalHost,AllowRemote,Port,ExpireAfterMinutes,RetryAfterMinutes,CleanupDays	) " +
					"VALUES (@AllowLocalHost,@AllowRemote,@Port,@ExpireAfterMinutes,@RetryAfterMinutes,@CleanupDays	)";
					SqlCommand command = new SqlCommand(sql,conn);
					SqlParameter param = new SqlParameter("@AllowLocalHost",SqlDbType.Bit,0);
					param.Value = record.AllowLocalHost;
					command.Parameters.Add(param);
					param = new SqlParameter("@AllowRemote",SqlDbType.Bit,0);
					param.Value = record.AllowRemote;
					command.Parameters.Add(param);
					param = new SqlParameter("@Port",SqlDbType.SmallInt,0);
					if (record.Port == DatabaseSupport.InvalidID)
						param.Value = DBNull.Value;
					else
						param.Value = record.Port;
					command.Parameters.Add(param);
					param = new SqlParameter("@ExpireAfterMinutes",SqlDbType.Int,0);
					if (record.ExpireAfterMinutes == DatabaseSupport.InvalidID)
						param.Value = DBNull.Value;
					else
						param.Value = record.ExpireAfterMinutes;
					command.Parameters.Add(param);
					param = new SqlParameter("@RetryAfterMinutes",SqlDbType.Int,0);
					if (record.RetryAfterMinutes == DatabaseSupport.InvalidID)
						param.Value = DBNull.Value;
					else
						param.Value = record.RetryAfterMinutes;
					command.Parameters.Add(param);
					param = new SqlParameter("@CleanupDays",SqlDbType.Int,0);
					if (record.CleanupDays == DatabaseSupport.InvalidID)
						param.Value = DBNull.Value;
					else
						param.Value = record.CleanupDays;
					command.Parameters.Add(param);
					command.ExecuteNonQuery();
					record.ID = DatabaseSupport.GetIdentity(conn);
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			}

		public virtual int CreateRecord(bool AllowLocalHost,bool AllowRemote,short Port,int ExpireAfterMinutes,int RetryAfterMinutes,int CleanupDays)
			{
			// populate the record with items
			ConfigurationRecord record = new ConfigurationRecord();
			record.AllowLocalHost = AllowLocalHost;
			record.AllowRemote = AllowRemote;
			record.Port = Port;
			record.ExpireAfterMinutes = ExpireAfterMinutes;
			record.RetryAfterMinutes = RetryAfterMinutes;
			record.CleanupDays = CleanupDays;

			// write the record out
			CreateRecord(record);
			return record.ID;
			}

		public virtual void UpdateRecord(ConfigurationRecord record)
			{
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					string sql = "UPDATE [Configuration] " +
					"SET AllowLocalHost=@AllowLocalHost,AllowRemote=@AllowRemote,Port=@Port,ExpireAfterMinutes=@ExpireAfterMinutes,RetryAfterMinutes=@RetryAfterMinutes,CleanupDays=@CleanupDays WHERE ID=@ID";
					SqlCommand command = new SqlCommand(sql,conn);
					SqlParameter param = new SqlParameter("@AllowLocalHost",SqlDbType.Bit,0);
					param.Value = record.AllowLocalHost;
					command.Parameters.Add(param);
					param = new SqlParameter("@AllowRemote",SqlDbType.Bit,0);
					param.Value = record.AllowRemote;
					command.Parameters.Add(param);
					param = new SqlParameter("@Port",SqlDbType.SmallInt,0);
					if (record.Port == DatabaseSupport.InvalidID)
						param.Value = DBNull.Value;
					else
						param.Value = record.Port;
					command.Parameters.Add(param);
					param = new SqlParameter("@ExpireAfterMinutes",SqlDbType.Int,0);
					if (record.ExpireAfterMinutes == DatabaseSupport.InvalidID)
						param.Value = DBNull.Value;
					else
						param.Value = record.ExpireAfterMinutes;
					command.Parameters.Add(param);
					param = new SqlParameter("@RetryAfterMinutes",SqlDbType.Int,0);
					if (record.RetryAfterMinutes == DatabaseSupport.InvalidID)
						param.Value = DBNull.Value;
					else
						param.Value = record.RetryAfterMinutes;
					command.Parameters.Add(param);
					param = new SqlParameter("@CleanupDays",SqlDbType.Int,0);
					if (record.CleanupDays == DatabaseSupport.InvalidID)
						param.Value = DBNull.Value;
					else
						param.Value = record.CleanupDays;
					command.Parameters.Add(param);
					param = new SqlParameter("@ID",SqlDbType.Int,0);
					param.Value = record.ID;
					command.Parameters.Add(param);
					command.ExecuteNonQuery();
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			}

		public virtual void UpdateRecord(int ID,bool AllowLocalHost,bool AllowRemote,short Port,int ExpireAfterMinutes,int RetryAfterMinutes,int CleanupDays)
			{
			// populate the record with items
			ConfigurationRecord record = new ConfigurationRecord();
			record.ID = ID;
			record.AllowLocalHost = AllowLocalHost;
			record.AllowRemote = AllowRemote;
			record.Port = Port;
			record.ExpireAfterMinutes = ExpireAfterMinutes;
			record.RetryAfterMinutes = RetryAfterMinutes;
			record.CleanupDays = CleanupDays;

			// write the record out
			UpdateRecord(record);
			}

		public virtual void DeleteRecord(int RecordID)
			{
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					string sql = "DELETE FROM [Configuration] WHERE ID=@ID";
					SqlCommand command = new SqlCommand(sql,conn);
					SqlParameter param = new SqlParameter("@ID",SqlDbType.Int,0);
					param.Value = RecordID;
					command.Parameters.Add(param);
					command.ExecuteNonQuery();
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			}

		public virtual void DeleteRecord(ConfigurationRecord record)
			{
			DeleteRecord(record.ID);
			}
		}
	}
