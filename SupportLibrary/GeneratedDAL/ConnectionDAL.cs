// Connection Data Access Layer
//
// DO NOT MODIFY THIS FILE DIRECTLY.  IT WILL BE OVERWRITTEN.
// Generated by SQLServerGenerator.cs
// Copyright (c) 2010, Chris Laforet Software.  All rights reserved
//
// Generated at 04/24/2010 03:03


using System;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Sql;
using System.Collections.Generic;
using SupportLibrary.Database;


namespace SupportLibrary.Database
	{
	public partial class ConnectionDAL: IDAL<ConnectionRecord>
		{
		private readonly string _connectionString;
		public readonly string TableName = "Connection";

		public ConnectionDAL(string ConnectionString)
			{
			_connectionString = ConnectionString;
			}

		static public ConnectionRecord ReapRecord(SqlDataReader Reader)
			{
			int ID = Reader.GetInt32(Reader.GetOrdinal("ID"));
			string Remote = Reader.GetString(Reader.GetOrdinal("Remote"));
			DateTime StartTime = Reader.GetDateTime(Reader.GetOrdinal("StartTime"));
			DateTime? EndTime = null;
			if (!Reader.IsDBNull(Reader.GetOrdinal("EndTime")))
				EndTime = Reader.GetDateTime(Reader.GetOrdinal("EndTime"));
			bool IsInbound = Reader.GetBoolean(Reader.GetOrdinal("IsInbound"));
			ConnectionRecord record = new ConnectionRecord();

			record.ID = ID;
			record.Remote = Remote;
			record.StartTime = StartTime;
			record.EndTime = EndTime;
			record.IsInbound = IsInbound;
			return record;
			}

		public virtual IList<ConnectionRecord> ReadAllRecords()
			{
			IList<ConnectionRecord> list = new List<ConnectionRecord>(64);
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					SqlCommand command = new SqlCommand("SELECT * FROM [Connection]",conn);
					SqlDataReader rs = command.ExecuteReader();
					while (rs.Read())
						list.Add(ReapRecord(rs));
					rs.Close();
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			return list;
			}

		public virtual ConnectionRecord ReadRecord(int RecordID)
			{
			ConnectionRecord record = null;
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					SqlCommand command = new SqlCommand("SELECT * FROM [Connection] WHERE ID=@ID",conn);
					SqlParameter param = new SqlParameter("@ID",SqlDbType.Int,0);
					param.Value = RecordID;
					command.Parameters.Add(param);
					SqlDataReader rs = command.ExecuteReader();
					if (rs.Read())
						record = ReapRecord(rs);
					rs.Close();
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			return record;
			}

		public virtual void CreateRecord(ConnectionRecord record)
			{
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					string sql = "INSERT INTO [Connection] " + 
					"(Remote,StartTime,EndTime,IsInbound	) " +
					"VALUES (@Remote,@StartTime,@EndTime,@IsInbound	)";
					SqlCommand command = new SqlCommand(sql,conn);
					SqlParameter param = new SqlParameter("@Remote",SqlDbType.VarChar,0);
					param.Value = record.Remote;
					command.Parameters.Add(param);
					param = new SqlParameter("@StartTime",SqlDbType.DateTime,0);
					param.Value = record.StartTime;
					command.Parameters.Add(param);
					param = new SqlParameter("@EndTime",SqlDbType.DateTime,0);
					if (record.EndTime == null)
						param.Value = DBNull.Value;
					else
						param.Value = record.EndTime;
					command.Parameters.Add(param);
					param = new SqlParameter("@IsInbound",SqlDbType.Bit,0);
					param.Value = record.IsInbound;
					command.Parameters.Add(param);
					command.ExecuteNonQuery();
					record.ID = DatabaseSupport.GetIdentity(conn);
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			}

		public virtual int CreateRecord(string Remote,DateTime StartTime,DateTime? EndTime,bool IsInbound)
			{
			// populate the record with items
			ConnectionRecord record = new ConnectionRecord();
			record.Remote = Remote;
			record.StartTime = StartTime;
			record.EndTime = EndTime;
			record.IsInbound = IsInbound;

			// write the record out
			CreateRecord(record);
			return record.ID;
			}

		public virtual void UpdateRecord(ConnectionRecord record)
			{
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					string sql = "UPDATE [Connection] " +
					"SET Remote=@Remote,StartTime=@StartTime,EndTime=@EndTime,IsInbound=@IsInbound WHERE ID=@ID";
					SqlCommand command = new SqlCommand(sql,conn);
					SqlParameter param = new SqlParameter("@Remote",SqlDbType.VarChar,0);
					param.Value = record.Remote;
					command.Parameters.Add(param);
					param = new SqlParameter("@StartTime",SqlDbType.DateTime,0);
					param.Value = record.StartTime;
					command.Parameters.Add(param);
					param = new SqlParameter("@EndTime",SqlDbType.DateTime,0);
					if (record.EndTime == null)
						param.Value = DBNull.Value;
					else
						param.Value = record.EndTime;
					command.Parameters.Add(param);
					param = new SqlParameter("@IsInbound",SqlDbType.Bit,0);
					param.Value = record.IsInbound;
					command.Parameters.Add(param);
					param = new SqlParameter("@ID",SqlDbType.Int,0);
					param.Value = record.ID;
					command.Parameters.Add(param);
					command.ExecuteNonQuery();
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			}

		public virtual void UpdateRecord(int ID,string Remote,DateTime StartTime,DateTime? EndTime,bool IsInbound)
			{
			// populate the record with items
			ConnectionRecord record = new ConnectionRecord();
			record.ID = ID;
			record.Remote = Remote;
			record.StartTime = StartTime;
			record.EndTime = EndTime;
			record.IsInbound = IsInbound;

			// write the record out
			UpdateRecord(record);
			}

		public virtual void DeleteRecord(int RecordID)
			{
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					string sql = "DELETE FROM [Connection] WHERE ID=@ID";
					SqlCommand command = new SqlCommand(sql,conn);
					SqlParameter param = new SqlParameter("@ID",SqlDbType.Int,0);
					param.Value = RecordID;
					command.Parameters.Add(param);
					command.ExecuteNonQuery();
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			}

		public virtual void DeleteRecord(ConnectionRecord record)
			{
			DeleteRecord(record.ID);
			}
		}
	}
