// Header Data Access Layer
//
// DO NOT MODIFY THIS FILE DIRECTLY.  IT WILL BE OVERWRITTEN.
// Generated by SQLServerGenerator.cs
// Copyright (c) 2010, Chris Laforet Software.  All rights reserved
//
// Generated at 04/24/2010 03:03


using System;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Sql;
using System.Collections.Generic;
using SupportLibrary.Database;


namespace SupportLibrary.Database
	{
	public partial class HeaderDAL: IDAL<HeaderRecord>
		{
		private readonly string _connectionString;
		public readonly string TableName = "Header";

		public HeaderDAL(string ConnectionString)
			{
			_connectionString = ConnectionString;
			}

		static public HeaderRecord ReapRecord(SqlDataReader Reader)
			{
			int ID = Reader.GetInt32(Reader.GetOrdinal("ID"));
			int? BodyID = null;
			if (!Reader.IsDBNull(Reader.GetOrdinal("BodyID")))
				BodyID = Reader.GetInt32(Reader.GetOrdinal("BodyID"));
			string Sender = Reader.GetString(Reader.GetOrdinal("Sender"));
			string Recipient = Reader.GetString(Reader.GetOrdinal("Recipient"));
			int RecvConnectionID = Reader.GetInt32(Reader.GetOrdinal("RecvConnectionID"));
			int? SendConnectionID = null;
			if (!Reader.IsDBNull(Reader.GetOrdinal("SendConnectionID")))
				SendConnectionID = Reader.GetInt32(Reader.GetOrdinal("SendConnectionID"));
			DateTime ReceivedDateTime = Reader.GetDateTime(Reader.GetOrdinal("ReceivedDateTime"));
			DateTime? DeliveredDateTime = null;
			if (!Reader.IsDBNull(Reader.GetOrdinal("DeliveredDateTime")))
				DeliveredDateTime = Reader.GetDateTime(Reader.GetOrdinal("DeliveredDateTime"));
			DateTime? ExpiredDateTime = null;
			if (!Reader.IsDBNull(Reader.GetOrdinal("ExpiredDateTime")))
				ExpiredDateTime = Reader.GetDateTime(Reader.GetOrdinal("ExpiredDateTime"));
			HeaderRecord record = new HeaderRecord();

			record.ID = ID;
			record.BodyID = BodyID;
			record.Sender = Sender;
			record.Recipient = Recipient;
			record.RecvConnectionID = RecvConnectionID;
			record.SendConnectionID = SendConnectionID;
			record.ReceivedDateTime = ReceivedDateTime;
			record.DeliveredDateTime = DeliveredDateTime;
			record.ExpiredDateTime = ExpiredDateTime;
			return record;
			}

		public virtual IList<HeaderRecord> ReadAllRecords()
			{
			IList<HeaderRecord> list = new List<HeaderRecord>(64);
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					SqlCommand command = new SqlCommand("SELECT * FROM [Header]",conn);
					SqlDataReader rs = command.ExecuteReader();
					while (rs.Read())
						list.Add(ReapRecord(rs));
					rs.Close();
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			return list;
			}

		public virtual HeaderRecord ReadRecord(int RecordID)
			{
			HeaderRecord record = null;
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					SqlCommand command = new SqlCommand("SELECT * FROM [Header] WHERE ID=@ID",conn);
					SqlParameter param = new SqlParameter("@ID",SqlDbType.Int,0);
					param.Value = RecordID;
					command.Parameters.Add(param);
					SqlDataReader rs = command.ExecuteReader();
					if (rs.Read())
						record = ReapRecord(rs);
					rs.Close();
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			return record;
			}

		public virtual IList<HeaderRecord> ReadAllRecordsByBodyID(int BodyID)
			{
			IList<HeaderRecord> list = new List<HeaderRecord>(64);
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					SqlCommand command = new SqlCommand("SELECT * FROM [Header] WHERE BodyID=@BodyID",conn);
					SqlParameter param = new SqlParameter("@BodyID",SqlDbType.Int,0);
					param.Value = BodyID;
					command.Parameters.Add(param);
					SqlDataReader rs = command.ExecuteReader();
					while (rs.Read())
						list.Add(ReapRecord(rs));
					rs.Close();
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			return list;
			}

		public virtual IList<HeaderRecord> ReadAllRecordsByRecvConnectionID(int RecvConnectionID)
			{
			IList<HeaderRecord> list = new List<HeaderRecord>(64);
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					SqlCommand command = new SqlCommand("SELECT * FROM [Header] WHERE RecvConnectionID=@RecvConnectionID",conn);
					SqlParameter param = new SqlParameter("@RecvConnectionID",SqlDbType.Int,0);
					param.Value = RecvConnectionID;
					command.Parameters.Add(param);
					SqlDataReader rs = command.ExecuteReader();
					while (rs.Read())
						list.Add(ReapRecord(rs));
					rs.Close();
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			return list;
			}

		public virtual IList<HeaderRecord> ReadAllRecordsBySendConnectionID(int SendConnectionID)
			{
			IList<HeaderRecord> list = new List<HeaderRecord>(64);
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					SqlCommand command = new SqlCommand("SELECT * FROM [Header] WHERE SendConnectionID=@SendConnectionID",conn);
					SqlParameter param = new SqlParameter("@SendConnectionID",SqlDbType.Int,0);
					param.Value = SendConnectionID;
					command.Parameters.Add(param);
					SqlDataReader rs = command.ExecuteReader();
					while (rs.Read())
						list.Add(ReapRecord(rs));
					rs.Close();
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			return list;
			}

		public virtual void CreateRecord(HeaderRecord record)
			{
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					string sql = "INSERT INTO [Header] " + 
					"(BodyID,Sender,Recipient,RecvConnectionID,SendConnectionID,ReceivedDateTime,DeliveredDateTime,ExpiredDateTime	) " +
					"VALUES (@BodyID,@Sender,@Recipient,@RecvConnectionID,@SendConnectionID,@ReceivedDateTime,@DeliveredDateTime,@ExpiredDateTime	)";
					SqlCommand command = new SqlCommand(sql,conn);
					SqlParameter param = new SqlParameter("@BodyID",SqlDbType.Int,0);
					if (record.BodyID == null)
						param.Value = DBNull.Value;
					else
						param.Value = record.BodyID;
					command.Parameters.Add(param);
					param = new SqlParameter("@Sender",SqlDbType.VarChar,0);
					param.Value = record.Sender;
					command.Parameters.Add(param);
					param = new SqlParameter("@Recipient",SqlDbType.VarChar,0);
					param.Value = record.Recipient;
					command.Parameters.Add(param);
					param = new SqlParameter("@RecvConnectionID",SqlDbType.Int,0);
					if (record.RecvConnectionID == DatabaseSupport.InvalidID)
						param.Value = DBNull.Value;
					else
						param.Value = record.RecvConnectionID;
					command.Parameters.Add(param);
					param = new SqlParameter("@SendConnectionID",SqlDbType.Int,0);
					if (record.SendConnectionID == null)
						param.Value = DBNull.Value;
					else
						param.Value = record.SendConnectionID;
					command.Parameters.Add(param);
					param = new SqlParameter("@ReceivedDateTime",SqlDbType.DateTime,0);
					param.Value = record.ReceivedDateTime;
					command.Parameters.Add(param);
					param = new SqlParameter("@DeliveredDateTime",SqlDbType.DateTime,0);
					if (record.DeliveredDateTime == null)
						param.Value = DBNull.Value;
					else
						param.Value = record.DeliveredDateTime;
					command.Parameters.Add(param);
					param = new SqlParameter("@ExpiredDateTime",SqlDbType.DateTime,0);
					if (record.ExpiredDateTime == null)
						param.Value = DBNull.Value;
					else
						param.Value = record.ExpiredDateTime;
					command.Parameters.Add(param);
					command.ExecuteNonQuery();
					record.ID = DatabaseSupport.GetIdentity(conn);
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			}

		public virtual int CreateRecord(int? BodyID,string Sender,string Recipient,int RecvConnectionID,int? SendConnectionID,DateTime ReceivedDateTime,DateTime? DeliveredDateTime,DateTime? ExpiredDateTime)
			{
			// populate the record with items
			HeaderRecord record = new HeaderRecord();
			record.BodyID = BodyID;
			record.Sender = Sender;
			record.Recipient = Recipient;
			record.RecvConnectionID = RecvConnectionID;
			record.SendConnectionID = SendConnectionID;
			record.ReceivedDateTime = ReceivedDateTime;
			record.DeliveredDateTime = DeliveredDateTime;
			record.ExpiredDateTime = ExpiredDateTime;

			// write the record out
			CreateRecord(record);
			return record.ID;
			}

		public virtual void UpdateRecord(HeaderRecord record)
			{
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					string sql = "UPDATE [Header] " +
					"SET BodyID=@BodyID,Sender=@Sender,Recipient=@Recipient,RecvConnectionID=@RecvConnectionID,SendConnectionID=@SendConnectionID,ReceivedDateTime=@ReceivedDateTime,DeliveredDateTime=@DeliveredDateTime,ExpiredDateTime=@ExpiredDateTime WHERE ID=@ID";
					SqlCommand command = new SqlCommand(sql,conn);
					SqlParameter param = new SqlParameter("@BodyID",SqlDbType.Int,0);
					if (record.BodyID == null)
						param.Value = DBNull.Value;
					else
						param.Value = record.BodyID;
					command.Parameters.Add(param);
					param = new SqlParameter("@Sender",SqlDbType.VarChar,0);
					param.Value = record.Sender;
					command.Parameters.Add(param);
					param = new SqlParameter("@Recipient",SqlDbType.VarChar,0);
					param.Value = record.Recipient;
					command.Parameters.Add(param);
					param = new SqlParameter("@RecvConnectionID",SqlDbType.Int,0);
					if (record.RecvConnectionID == DatabaseSupport.InvalidID)
						param.Value = DBNull.Value;
					else
						param.Value = record.RecvConnectionID;
					command.Parameters.Add(param);
					param = new SqlParameter("@SendConnectionID",SqlDbType.Int,0);
					if (record.SendConnectionID == null)
						param.Value = DBNull.Value;
					else
						param.Value = record.SendConnectionID;
					command.Parameters.Add(param);
					param = new SqlParameter("@ReceivedDateTime",SqlDbType.DateTime,0);
					param.Value = record.ReceivedDateTime;
					command.Parameters.Add(param);
					param = new SqlParameter("@DeliveredDateTime",SqlDbType.DateTime,0);
					if (record.DeliveredDateTime == null)
						param.Value = DBNull.Value;
					else
						param.Value = record.DeliveredDateTime;
					command.Parameters.Add(param);
					param = new SqlParameter("@ExpiredDateTime",SqlDbType.DateTime,0);
					if (record.ExpiredDateTime == null)
						param.Value = DBNull.Value;
					else
						param.Value = record.ExpiredDateTime;
					command.Parameters.Add(param);
					param = new SqlParameter("@ID",SqlDbType.Int,0);
					param.Value = record.ID;
					command.Parameters.Add(param);
					command.ExecuteNonQuery();
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			}

		public virtual void UpdateRecord(int ID,int? BodyID,string Sender,string Recipient,int RecvConnectionID,int? SendConnectionID,DateTime ReceivedDateTime,DateTime? DeliveredDateTime,DateTime? ExpiredDateTime)
			{
			// populate the record with items
			HeaderRecord record = new HeaderRecord();
			record.ID = ID;
			record.BodyID = BodyID;
			record.Sender = Sender;
			record.Recipient = Recipient;
			record.RecvConnectionID = RecvConnectionID;
			record.SendConnectionID = SendConnectionID;
			record.ReceivedDateTime = ReceivedDateTime;
			record.DeliveredDateTime = DeliveredDateTime;
			record.ExpiredDateTime = ExpiredDateTime;

			// write the record out
			UpdateRecord(record);
			}

		public virtual void DeleteRecord(int RecordID)
			{
			SqlConnection conn = new SqlConnection(_connectionString);
			conn.Open();
			if (conn != null)
				{
				try
					{
					string sql = "DELETE FROM [Header] WHERE ID=@ID";
					SqlCommand command = new SqlCommand(sql,conn);
					SqlParameter param = new SqlParameter("@ID",SqlDbType.Int,0);
					param.Value = RecordID;
					command.Parameters.Add(param);
					command.ExecuteNonQuery();
					}
				finally
					{
					if (conn != null)
						conn.Close();
					}
				}
			}

		public virtual void DeleteRecord(HeaderRecord record)
			{
			DeleteRecord(record.ID);
			}
		}
	}
